#! /bin/bash
#
#	minectl - Control a minecraft server
#
#	Copyright (C) 2012 Richard Neumann <mail@richard-neumann.de>
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
################################################################################

# TODO: Make all output language-dependent
# TODO: Outsource common functions to minelib

###################################
# Version and license information #
###################################

VERSION=7.0
ARCH=noarch
AUTHOR="Richard Neumann"
YEAR="2013"
LICENSE="GPL v. 3.0 or later"


###################
# Local variables #
###################

# Full path to the script
THIS="$(realpath $0)"

# Plugins directory
PLUGIN_DIR="/usr/local/libexec/$MC_USER-plugins"

# Minectl's wanted plugins
PLUGINS_LIST="$MC_HOME/.plugins.list"

# Loaded plugins
LOADED_PLUGINS=""

# Command line
CMD_LINE=""

# Return value
RETVAL=0

# Synopsis of usage for user information
USAGE="Usage:	
	\033[1mminectl\033[0m [\033[1minit\033[0m | \033[1mlist\033[0m [\033[3m--verbose\033[0m, \033[3m--very-verbose\033[0m] | \033[1madd\033[0m \033[3mserver_name\033[0m [\033[1m--jar\033[0m \033[3mjar_file\033[0m] | \033[1mevents\033[0m]
	\033[1mminectl\033[0m \033[1mbackup\033[0m \033[3mbackup_directory\033[0m
	\033[1mminectl\033[0m \033[1mjar\033[0m [list | update | upgrade]]
	\033[1mminectl\033[0m \033[1mjar\033[0m \033[1mrepository\033[0m [list | add \033[3mURL\033[0m \033[3mname\033[0m | remove \033[3mname\033[0m]
	\033[1mminectl\033[0m \033[3mserver_name\033[0m [\033[1mremove\033[0m | \033[1mrename\033[0m \033[3mnew_name\033[0m]
	\033[1mminectl\033[0m \033[3mserver_name\033[0m \033[1mpasswd\033[0m [\033[1mlist\033[0m | \033[1mlock\033[0m | \033[1munlock\033[0m | [\033[1mwhitelist\033[0m | \033[1mblacklist\033[0m | \033[1mop\033[0m | \033[1mdeop\033[0m | \033[1mstatus\033[0m] \033[3muser_name\033[0m]
	\033[1mminectl\033[0m \033[3mserver_name\033[0m [\033[1mconfigure\033[0m | \033[1mproperties\033[0m] [\033[3mvariable\033[0m=\033[3mvalue\033[0m | -\033[3mvariable\033[0m]
	\033[1mminectl\033[0m \033[3mserver_name\033[0m [[\033[1mbackup\033[0m | \033[1mrestore\033[0m [\033[1m--clean\033[0m]] [\033[3mbackup_name\033[0m] | \033[1mreset\033[0m [\033[1m--erase-config\033[0m]]
	\033[1mminectl\033[0m \033[3mserver_name\033[0m \033[1mevent\033[0m [\033[1mlist\033[0m | [\033[1menable\033[0m | \033[1mdisable\033[0m] \033[3mevent_handler\033[0m]
	\033[1mminectl\033[0m \033[3mserver_name\033[0m \033[1mstatus\033[0m 
	\033[1mminectl\033[0m \033[3mserver_name\033[0m [\033[1mexec\033[0m \033[3mjava_program_command\033[0m | \033[1mplayers\033[0m | \033[1mplayer-count\033[0m]
	\033[1mminectl\033[0m \033[3mserver_name\033[0m \033[3mjava_program_command\033[0m
	\033[1mminectl\033[0m [\033[1m--version\033[0m | \033[1m--help\033[0m]
"


		
######################################################################################################################

######################################################################################################################

#####################
# Private functions #
#####################

# Check if certain plugins are loaded
_minectl_plugin_loaded() {
	local PLUGIN="$1"
	local LOADED_PLUGIN=
	
	for LOADED_PLUGIN in $LOADED_PLUGINS; do
		if [ "$PLUGIN" == "$LOADED_PLUGIN" ]; then
			return 0
		fi
	done
	
	return 1
}

_minectl_plugins_loaded() {
	local PLUGINS="$@"
	local PLUGIN=
	local RETVAL=0
	
	for PLUGIN in $PLUGINS; do
		if ( _minectl_plugin_loaded $PLUGIN ); then
			let RETVAL++
		fi
	done
	
	return $RETVAL
}

# Load a plugin
_minectl_load_plugin() {
	local PLUGIN="$1"
	local PLUGIN_FILE="$PLUGIN_DIR/$PLUGIN.mp"

	if ( ! _minectl_plugin_loaded $PLUGIN ); then
		if [ -f "$PLUGIN_FILE" ]; then
			if ( "$PLUGIN_FILE" checkdeps $PLUGINS 2> /dev/null ); then
				# XXX: debug
				print -l 3 "Loading plugin $PLUGIN"
				source "$PLUGIN_FILE"
				LOADED_PLUGINS="$LOADED_PLUGINS $PLUGIN"
				LOADED_PLUGINS="$(echo $LOADED_PLUGINS | sort | uniq)"
				return 0
			else
				print -2 "Plugin '$PLUGIN' failed dependency check"
				#print -2 "Plugin '$PLUGIN' $LANG_PLUGIN_DEPS_ERR"
				return 1
			fi
		else
			print -2 "Plugin '$PLUGIN' could not be found"
			#print -2 "Plugin '$PLUGIN' $LANG_PLUGIN_NOT_FOUND"
			return 1
		fi
	else
		print -l 3 -2 "Plugin '$PLUGIN' is already loaded"
		#print -l 3 -2 "Plugin '$PLUGIN' $LANG_PLUGIN_ALREADY_LOADED"
	fi
	
	return 1
}

# Load multiple plugins
_minectl_load_plugins() {
	local PLUGINS="$@"
	local PLUGIN=

	for PLUGIN in $PLUGINS; do
		_minectl_load_plugin $PLUGIN
	done
}

# Add plugins to list of wanted plugins
_minectl_require() {
	_minectl_load_plugins "$@"
}

# Check if we are a valid user
_minectl_check_user() {
	print -l 1 "$LANG_YOU_ARE_USER '$USER'"

	if [ "$USER" == "$MC_USER" ]; then
		print -l 1 "$LANG_USER_INFO_MINECTL"
	elif [ "$USER" == "root" ]; then
		print -l 1 "$LANG_USER_INFO_ROOT"
	else
		fail "$LANG_INVALID_USER"
	fi
}

_minectl_run() {
	local CMD="$1"
	shift

	local FUNCTION="mc_$(echo $CMD | sed 's/-/_/g')"

	if [ -n "$CMD" ]; then
		if ( function_exists "$FUNCTION" ); then
			$FUNCTION "$@"
		else
			print --fail "No such command '$CMD'"
		fi
	else
		# TODO: Enter shell here?
		return 0
	fi
}

_minectl_loaded_plugins() {
	local PLUGIN=
	local TEMP1="$(mktemp)"
	local TEMP2="$(mktemp)"
	local LOADED_PLUGINS_TEMP=""

	for PLUGIN in $LOADED_PLUGINS; do
		echo "$PLUGIN" >> "$TEMP1"
	done

	sort -r "$TEMP1" | uniq > "$TEMP2"

	while read PLUGIN; do
		LOADED_PLUGINS_TEMP="$PLUGIN $LOADED_PLUGINS_TEMP"
	done < "$TEMP2"

	echo "$LOADED_PLUGINS_TEMP"

	rm -f "$TEMP1" "$TEMP2"
}

# Store loaded plugins cfg
_minectl_store_plugins_cfg() {
	rm -f "$PLUGINS_LIST"
	for PLUGIN in $LOADED_PLUGINS; do
		echo $PLUGIN >> "$PLUGINS_LIST"
	done
}

# List all defined commands
_minectl_list_commands() {
	local TEMP="$(mktemp)"
	local COMMANDS=""

	declare -F | awk '{print $3}' | grep ^"mc_" | cut -d "_" --output-delimiter "_" -f 2- | sed 's/_/-/g' | sort -r > "$TEMP"

	while read COMMAND; do
		COMMANDS="$COMMAND $COMMANDS"
	done < "$TEMP"

	echo "$COMMANDS"

	rm -f "$TEMP"
}

####################
# Public functions #
####################

require() {
	_minectl_require "$@"
}

######################################################################################################################

###############
# Main script #
###############

#####################
# Load main library #
#####################
source /usr/local/etc/minelib 2> /dev/null || { echo "Could not load main library" 1>&2; exit 1; }

# Read plugin list
if [ -f "$PLUGINS_LIST" ]; then
	while read PLUGIN; do
		_minectl_load_plugin "$PLUGIN"
	done < "$PLUGINS_LIST"
fi

if [ $# -eq 0 ]; then
	# TODO: Go to shell mode
	:
else
	while (( $# )); do
		case $1 in
			--plugins|-p)	_minectl_load_plugins $2
							shift
							_minectl_store_plugins_cfg
			;;
			--list-plugins|-lp)	cd "$PLUGIN_DIR"
								ls *.mp
			;;
			--verbose|-v)	DEBUG_LEVEL=1
			;;
			--very-verbose|-vv)	DEBUG_LEVEL=2
			;;
			--level|-l)	DEBUG_LEVEL="$2"
					shift
			;;
			--commands|-c)	print "Available commands: $(_minectl_list_commands)"
			;;
			*)		CMDLINE="$@"
					break
		esac
		shift
	done
	
	if ( very_verbose ); then
		print "Loaded plugins: $(_minectl_loaded_plugins)"
	fi
	
	if ( verbose ); then
		print "Available commands: $(_minectl_list_commands)"
	fi
	
	_minectl_load_plugins $PLUGINS
	_minectl_run $CMDLINE
fi